version: '3.8'

services:
  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: aegisx-minio
    hostname: minio
    restart: unless-stopped
    ports:
      - "9000:9000"    # MinIO API
      - "9001:9001"    # MinIO Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-aegisx}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-aegisx123}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://localhost:9000}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./config/minio:/root/.minio
    networks:
      - aegisx-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s

  # MinIO Client (for bucket setup and management)
  createbuckets:
    image: minio/mc:latest
    container_name: aegisx-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      
      # Create buckets
      /usr/bin/mc mb myminio/aegisx-files --ignore-existing;
      /usr/bin/mc mb myminio/aegisx-temp --ignore-existing;
      /usr/bin/mc mb myminio/aegisx-public --ignore-existing;
      /usr/bin/mc mb myminio/aegisx-private --ignore-existing;
      
      # Set bucket policies
      /usr/bin/mc anonymous set download myminio/aegisx-public;
      /usr/bin/mc anonymous set none myminio/aegisx-private;
      /usr/bin/mc anonymous set none myminio/aegisx-files;
      
      # Enable versioning
      /usr/bin/mc version enable myminio/aegisx-files;
      /usr/bin/mc version enable myminio/aegisx-private;
      
      # Set retention policies for healthcare compliance
      /usr/bin/mc retention set governance 7y --default myminio/aegisx-private;
      
      echo 'MinIO setup completed successfully';
      exit 0;
      "
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-aegisx}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-aegisx123}
    networks:
      - aegisx-network

volumes:
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./storage/minio

networks:
  aegisx-network:
    external: true